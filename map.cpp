#include <DxLib.h>
#include "Unit.h"


int map_gLayer1[16][16] = {
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182 },
	{ 182,182,182,182,182,182,182,182,182,182,438,439,439,439,439,440 },
	{ 182,182,182,182,182,182,182,182,182,182,470,471,471,471,471,472 },
	{ 182,182,182,182,182,182,182,182,182,182,470,471,375,376,471,472 },
	{ 182,182,182,182,182,182,182,182,182,182,470,471,407,408,471,472 },
	{ 182,182,182,182,182,182,182,182,182,182,470,471,471,471,471,472 },
	{ 182,182,182,182,182,182,182,182,182,182,502,503,503,503,503,504 }
};
int map_gLayer2[16][16] = {
	{ 0,0,0,0,0,0,0,0,0,112,113,114,0,0,0,0 },
	{ 505,506,507,505,506,507,505,506,507,112,113,114,0,0,0,0 },
	{ 537,538,539,537,538,539,537,538,539,112,113,114,6,7,8,0 },
	{ 569,570,571,569,570,571,569,570,571,112,113,114,38,39,40,0 },
	{ 0,0,0,0,0,0,0,0,0,112,113,114,70,71,72,0 },
	{ 0,80,81,81,81,81,81,81,81,50,113,114,134,135,136,0 },
	{ 0,112,113,113,113,113,113,113,113,113,113,114,0,0,0,0 },
	{ 0,112,113,17,145,145,145,145,145,145,145,146,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,112,113,114,0,0,0,0,0,0,0,0,0,0,0,0 }
};




int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	ChangeWindowMode(TRUE);
	SetGraphMode(32 * 16, 32 * 16, 32);
	if (DxLib_Init() == -1) {
		return -1;
	}
	SetDrawScreen(DX_SCREEN_BACK);

	int tile_handle[40*40];
	LoadDivGraph("map/base_out_atlas.png", 32 * 32, 32, 32, 32, 32, tile_handle);
	
	Unit *char1 = new Unit(6, 9, "field_unit/1001010401.png");

	while (ProcessMessage() != -1) {
		ScreenFlip();
		ClearDrawScreen();

		//DrawGraph(0, 0, handle, true);
		
		
		for (int j = 0; j < 16; j++) {
			for (int i = 0; i < 16; i++) {
				if (map_gLayer1[j][i] != 0)
				DrawGraph(i * 32, j * 32, tile_handle[map_gLayer1[j][i]-1], true);
			}
		}
		
		for (int j = 0; j < 16; j++) {
			for (int i = 0; i < 16; i++) {
				if(map_gLayer2[j][i] != 0)
					DrawGraph(i * 32, j * 32, tile_handle[map_gLayer2[j][i]-1], true);
			}
		}
		//WaitKey();
		for (int j = 0; j < 16; j++) {
			for (int i = 0; i < 16; i++) {
				DrawLine(i * 32, j * 32, (i + 1) * 32, j * 32, GetColor(255, 255, 255), false);
				DrawLine(i * 32, j * 32, i * 32, (j+1) * 32, GetColor(255, 255, 255), false);
			}
		}
		
		
		char1->MoveArea();
		char1->MoveByClick();
		char1->View();
		
	}
	DxLib_End();
	return 0;
}